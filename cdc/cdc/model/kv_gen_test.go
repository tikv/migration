package model

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/tinylib/msgp/msgp"
)

func TestGetStructFieldNum(t *testing.T) {
	type StructA struct {
		field1 int
		field2 uint64
		field3 string
	}

	require.Equal(t, 3, getStructFieldNum(StructA{}))
}

func TestGenerateFieldName(t *testing.T) {
	s := "keyspan_id"
	tbytes := []byte{0xaa, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64}
	bytes := generateFeildName(s)
	require.Equal(t, bytes, tbytes)
}

func TestMarshalUnmarshalRawKVEntry(t *testing.T) {
	v := RawKVEntry{
		OpType:    OpTypePut,
		Key:       []byte("key"),
		Value:     []byte("value"),
		OldValue:  []byte("old_value"),
		StartTs:   0,
		CRTs:      1,
		ExpiredTs: 2,
		RegionID:  3,
		KeySpanID: 4,
	}

	bts, err := v.MarshalMsg(nil)
	if err != nil {
		t.Fatal(err)
	}
	left, err := v.UnmarshalMsg(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after UnmarshalMsg(): %q", len(left), left)
	}
	require.Equal(t, v, RawKVEntry{
		OpType:    OpTypePut,
		Key:       []byte("key"),
		Value:     []byte("value"),
		OldValue:  []byte("old_value"),
		StartTs:   0,
		CRTs:      1,
		ExpiredTs: 2,
		RegionID:  3,
		KeySpanID: 4,
	})

	left, err = msgp.Skip(bts)
	if err != nil {
		t.Fatal(err)
	}
	if len(left) > 0 {
		t.Errorf("%d bytes left over after Skip(): %q", len(left), left)
	}
}

func BenchmarkMarshalMsgRawKVEntry(b *testing.B) {
	v := RawKVEntry{}
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		v.MarshalMsg(nil)
	}
}

func BenchmarkAppendMsgRawKVEntry(b *testing.B) {
	v := RawKVEntry{}
	bts := make([]byte, 0, v.Msgsize())
	bts, _ = v.MarshalMsg(bts[0:0])
	b.SetBytes(int64(len(bts)))
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		bts, _ = v.MarshalMsg(bts[0:0])
	}
}

func BenchmarkUnmarshalRawKVEntry(b *testing.B) {
	v := RawKVEntry{}
	bts, _ := v.MarshalMsg(nil)
	b.ReportAllocs()
	b.SetBytes(int64(len(bts)))
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := v.UnmarshalMsg(bts)
		if err != nil {
			b.Fatal(err)
		}
	}
}

func TestEncodeDecodeRawKVEntry(t *testing.T) {
	v := RawKVEntry{
		OpType:    OpTypePut,
		Key:       []byte("key"),
		Value:     []byte("value"),
		OldValue:  []byte("old_value"),
		StartTs:   0,
		CRTs:      1,
		ExpiredTs: 2,
		RegionID:  3,
		KeySpanID: 4,
	}

	var buf bytes.Buffer
	msgp.Encode(&buf, &v)

	m := v.Msgsize()
	if buf.Len() > m {
		t.Log("WARNING: TestEncodeDecodeRawKVEntry Msgsize() is inaccurate")
	}

	vn := RawKVEntry{}
	err := msgp.Decode(&buf, &vn)
	if err != nil {
		t.Error(err)
	}

	require.Equal(t, v, vn)

	buf.Reset()
	msgp.Encode(&buf, &v)
	err = msgp.NewReader(&buf).Skip()
	if err != nil {
		t.Error(err)
	}
}

func BenchmarkEncodeRawKVEntry(b *testing.B) {
	v := RawKVEntry{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)
	b.SetBytes(int64(buf.Len()))
	en := msgp.NewWriter(msgp.Nowhere)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		v.EncodeMsg(en)
	}
	en.Flush()
}

func BenchmarkDecodeRawKVEntry(b *testing.B) {
	v := RawKVEntry{}
	var buf bytes.Buffer
	msgp.Encode(&buf, &v)
	b.SetBytes(int64(buf.Len()))
	rd := msgp.NewEndlessReader(buf.Bytes(), b)
	dc := msgp.NewReader(rd)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		err := v.DecodeMsg(dc)
		if err != nil {
			b.Fatal(err)
		}
	}
}
